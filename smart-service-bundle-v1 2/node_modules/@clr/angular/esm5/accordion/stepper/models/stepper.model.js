/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import * as tslib_1 from "tslib";
import { AccordionModel } from '../../models/accordion.model';
import { AccordionStatus } from '../../enums/accordion-status.enum';
var StepperModel = /** @class */ (function (_super) {
    tslib_1.__extends(StepperModel, _super);
    function StepperModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StepperModel.prototype, "allPanelsCompleted", {
        get: function () {
            return this.panels.length && this.getNumberOfIncompletePanels() === 0 && this.getNumberOfOpenPanels() === 0;
        },
        enumerable: true,
        configurable: true
    });
    StepperModel.prototype.addPanel = function (id, open) {
        if (open === void 0) { open = false; }
        _super.prototype.addPanel.call(this, id, open);
        this._panels[id].disabled = true;
    };
    StepperModel.prototype.updatePanelOrder = function (ids) {
        _super.prototype.updatePanelOrder.call(this, ids);
        this.openFirstPanel();
    };
    StepperModel.prototype.togglePanel = function (panelId) {
        if (this._panels[panelId].status === AccordionStatus.Complete) {
            this._panels[panelId].open = !this._panels[panelId].open;
        }
    };
    StepperModel.prototype.navigateToNextPanel = function (currentPanelId, currentPanelValid) {
        if (currentPanelValid === void 0) { currentPanelValid = true; }
        if (currentPanelValid) {
            this.completePanel(currentPanelId);
            this.openNextPanel(this._panels[currentPanelId].id);
        }
        else {
            this.setPanelError(currentPanelId);
        }
    };
    StepperModel.prototype.overrideInitialPanel = function (panelId) {
        var _this = this;
        this.panels.filter(function () { return _this._panels[panelId] !== undefined; }).forEach(function (panel) {
            if (panel.index < _this._panels[panelId].index) {
                _this.completePanel(panel.id);
            }
            else if (panel.id === panelId) {
                _this._panels[panel.id].open = true;
            }
            else {
                _this._panels[panel.id].open = false;
            }
        });
    };
    StepperModel.prototype.setPanelsWithErrors = function (ids) {
        var _this = this;
        ids.forEach(function (id) { return _this.setPanelError(id); });
    };
    StepperModel.prototype.resetPanels = function () {
        var _this = this;
        this.panels.forEach(function (p) { return _this.resetPanel(p.id); });
        this.openFirstPanel();
    };
    StepperModel.prototype.resetAllFuturePanels = function (panelId) {
        var _this = this;
        this.panels.filter(function (panel) { return panel.index >= _this._panels[panelId].index; }).forEach(function (panel) { return _this.resetPanel(panel.id); });
    };
    StepperModel.prototype.resetPanel = function (panelId) {
        this._panels[panelId].status = AccordionStatus.Inactive;
        this._panels[panelId].open = false;
        this._panels[panelId].disabled = true;
    };
    StepperModel.prototype.openFirstPanel = function () {
        var firstPanel = this.getFirstPanel();
        this._panels[firstPanel.id].open = true;
        this._panels[firstPanel.id].disabled = true;
    };
    StepperModel.prototype.completePanel = function (panelId) {
        this._panels[panelId].status = AccordionStatus.Complete;
        this._panels[panelId].disabled = false;
        this._panels[panelId].open = false;
    };
    StepperModel.prototype.openNextPanel = function (currentPanelId) {
        var nextPanel = this.getNextPanel(currentPanelId);
        if (nextPanel) {
            this.resetAllFuturePanels(nextPanel.id);
            this._panels[nextPanel.id].open = true;
            this._panels[nextPanel.id].disabled = true;
        }
    };
    StepperModel.prototype.setPanelError = function (panelId) {
        this.resetAllFuturePanels(panelId);
        this._panels[panelId].open = true;
        this._panels[panelId].status = AccordionStatus.Error;
    };
    StepperModel.prototype.getFirstPanel = function () {
        return this.panels.find(function (panel) { return panel.index === 0; });
    };
    StepperModel.prototype.getNextPanel = function (currentPanelId) {
        var _this = this;
        return this.panels.find(function (s) { return s.index === _this._panels[currentPanelId].index + 1; });
    };
    StepperModel.prototype.getNumberOfIncompletePanels = function () {
        return this.panels.reduce(function (prev, next) { return (next.status !== AccordionStatus.Complete ? prev + 1 : prev); }, 0);
    };
    StepperModel.prototype.getNumberOfOpenPanels = function () {
        return this.panels.reduce(function (prev, next) { return (next.open !== false ? prev + 1 : prev); }, 0);
    };
    return StepperModel;
}(AccordionModel));
export { StepperModel };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbImFjY29yZGlvbi9zdGVwcGVyL21vZGVscy9zdGVwcGVyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7O0FBRUgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVwRTtJQUFrQyx3Q0FBYztJQUFoRDs7SUF3R0EsQ0FBQztJQXZHQyxzQkFBSSw0Q0FBa0I7YUFBdEI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUcsQ0FBQzs7O09BQUE7SUFFRCwrQkFBUSxHQUFSLFVBQVMsRUFBVSxFQUFFLElBQVk7UUFBWixxQkFBQSxFQUFBLFlBQVk7UUFDL0IsaUJBQU0sUUFBUSxZQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVELHVDQUFnQixHQUFoQixVQUFpQixHQUFhO1FBQzVCLGlCQUFNLGdCQUFnQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsa0NBQVcsR0FBWCxVQUFZLE9BQWU7UUFDekIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsUUFBUSxFQUFFO1lBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9B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Q0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFqQixDQUFpQixDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLG1DQUFZLEdBQXBCLFVBQXFCLGNBQXNCO1FBQTNDLGlCQUVDO1FBREMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVPLGtEQUEyQixHQUFuQztRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFJLEVBQUUsSUFBSSxJQUFLLE9BQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUE1RCxDQUE0RCxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFFTyw0Q0FBcUIsR0FBN0I7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLElBQUksSUFBSyxPQUFBLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUF2QyxDQUF1QyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF4R0QsQ0FBa0MsY0FBYyxHQXdHL0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IEFjY29yZGlvbk1vZGVsIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FjY29yZGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBBY2NvcmRpb25TdGF0dXMgfSBmcm9tICcuLi8uLi9lbnVtcy9hY2NvcmRpb24tc3RhdHVzLmVudW0nO1xuXG5leHBvcnQgY2xhc3MgU3RlcHBlck1vZGVsIGV4dGVuZHMgQWNjb3JkaW9uTW9kZWwge1xuICBnZXQgYWxsUGFuZWxzQ29tcGxldGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhbmVscy5sZW5ndGggJiYgdGhpcy5nZXROdW1iZXJPZkluY29tcGxldGVQYW5lbHMoKSA9PT0gMCAmJiB0aGlzLmdldE51bWJlck9mT3BlblBhbmVscygpID09PSAwO1xuICB9XG5cbiAgYWRkUGFuZWwoaWQ6IHN0cmluZywgb3BlbiA9IGZhbHNlKSB7XG4gICAgc3VwZXIuYWRkUGFuZWwoaWQsIG9wZW4pO1xuICAgIHRoaXMuX3BhbmVsc1tpZF0uZGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgdXBkYXRlUGFuZWxPcmRlcihpZHM6IHN0cmluZ1tdKSB7XG4gICAgc3VwZXIudXBkYXRlUGFuZWxPcmRlcihpZHMpO1xuICAgIHRoaXMub3BlbkZpcnN0UGFuZWwoKTtcbiAgfVxuXG4gIHRvZ2dsZVBhbmVsKHBhbmVsSWQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9wYW5lbHNbcGFuZWxJZF0uc3RhdHVzID09PSBBY2NvcmRpb25TdGF0dXMuQ29tcGxldGUpIHtcbiAgICAgIHRoaXMuX3BhbmVsc1twYW5lbElkXS5vcGVuID0gIXRoaXMuX3BhbmVsc1twYW5lbElkXS5vcGVuO1xuICAgIH1cbiAgfVxuXG4gIG5hdmlnYXRlVG9OZXh0UGFuZWwoY3VycmVudFBhbmVsSWQ6IHN0cmluZywgY3VycmVudFBhbmVsVmFsaWQgPSB0cnVlKSB7XG4gICAgaWYgKGN1cnJlbnRQYW5lbFZhbGlkKSB7XG4gICAgICB0aGlzLmNvbXBsZXRlUGFuZWwoY3VycmVudFBhbmVsSWQpO1xuICAgICAgdGhpcy5vcGVuTmV4dFBhbmVsKHRoaXMuX3BhbmVsc1tjdXJyZW50UGFuZWxJZF0uaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBhbmVsRXJyb3IoY3VycmVudFBhbmVsSWQpO1xuICAgIH1cbiAgfVxuXG4gIG92ZXJyaWRlSW5pdGlhbFBhbmVsKHBhbmVsSWQ6IHN0cmluZykge1xuICAgIHRoaXMucGFuZWxzLmZpbHRlcigoKSA9PiB0aGlzLl9wYW5lbHNbcGFuZWxJZF0gIT09IHVuZGVmaW5lZCkuZm9yRWFjaChwYW5lbCA9PiB7XG4gICAgICBpZiAocGFuZWwuaW5kZXggPCB0aGlzLl9wYW5lbHNbcGFuZWxJZF0uaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZVBhbmVsKHBhbmVsLmlkKTtcbiAgICAgIH0gZWxzZSBpZiAocGFuZWwuaWQgPT09IHBhbmVsSWQpIHtcbiAgICAgICAgdGhpcy5fcGFuZWxzW3BhbmVsLmlkXS5vcGVuID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhbmVsc1twYW5lbC5pZF0ub3BlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0UGFuZWxzV2l0aEVycm9ycyhpZHM6IHN0cmluZ1tdKSB7XG4gICAgaWRzLmZvckVhY2goaWQgPT4gdGhpcy5zZXRQYW5lbEVycm9yKGlkKSk7XG4gIH1cblxuICByZXNldFBhbmVscygpIHtcbiAgICB0aGlzLnBhbmVscy5mb3JFYWNoKHAgPT4gdGhpcy5yZXNldFBhbmVsKHAuaWQpKTtcbiAgICB0aGlzLm9wZW5GaXJzdFBhbmVsKCk7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0QWxsRnV0dXJlUGFuZWxzKHBhbmVsSWQ6IHN0cmluZykge1xuICAgIHRoaXMucGFuZWxzLmZpbHRlcihwYW5lbCA9PiBwYW5lbC5pbmRleCA+PSB0aGlzLl9wYW5lbHNbcGFuZWxJZF0uaW5kZXgpLmZvckVhY2gocGFuZWwgPT4gdGhpcy5yZXNldFBhbmVsKHBhbmVsLmlkKSk7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0UGFuZWwocGFuZWxJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5fcGFuZWxzW3BhbmVsSWRdLnN0YXR1cyA9IEFjY29yZGlvblN0YXR1cy5JbmFjdGl2ZTtcbiAgICB0aGlzLl9wYW5lbHNbcGFuZWxJZF0ub3BlbiA9IGZhbHNlO1xuICAgIHRoaXMuX3BhbmVsc1twYW5lbElkXS5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIG9wZW5GaXJzdFBhbmVsKCkge1xuICAgIGNvbnN0IGZpcnN0UGFuZWwgPSB0aGlzLmdldEZpcnN0UGFuZWwoKTtcbiAgICB0aGlzLl9wYW5lbHNbZmlyc3RQYW5lbC5pZF0ub3BlbiA9IHRydWU7XG4gICAgdGhpcy5fcGFuZWxzW2ZpcnN0UGFuZWwuaWRdLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgY29tcGxldGVQYW5lbChwYW5lbElkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9wYW5lbHNbcGFuZWxJZF0uc3RhdHVzID0gQWNjb3JkaW9uU3RhdHVzLkNvbXBsZXRlO1xuICAgIHRoaXMuX3BhbmVsc1twYW5lbElkXS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3BhbmVsc1twYW5lbElkXS5vcGVuID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIG9wZW5OZXh0UGFuZWwoY3VycmVudFBhbmVsSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IG5leHRQYW5lbCA9IHRoaXMuZ2V0TmV4dFBhbmVsKGN1cnJlbnRQYW5lbElkKTtcblxuICAgIGlmIChuZXh0UGFuZWwpIHtcbiAgICAgIHRoaXMucmVzZXRBbGxGdXR1cmVQYW5lbHMobmV4dFBhbmVsLmlkKTtcbiAgICAgIHRoaXMuX3BhbmVsc1tuZXh0UGFuZWwuaWRdLm9wZW4gPSB0cnVlO1xuICAgICAgdGhpcy5fcGFuZWxzW25leHRQYW5lbC5pZF0uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0UGFuZWxFcnJvcihwYW5lbElkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJlc2V0QWxsRnV0dXJlUGFuZWxzKHBhbmVsSWQpO1xuICAgIHRoaXMuX3BhbmVsc1twYW5lbElkXS5vcGVuID0gdHJ1ZTtcbiAgICB0aGlzLl9wYW5lbHNbcGFuZWxJZF0uc3RhdHVzID0gQWNjb3JkaW9uU3RhdHVzLkVycm9yO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGaXJzdFBhbmVsKCkge1xuICAgIHJldHVybiB0aGlzLnBhbmVscy5maW5kKHBhbmVsID0+IHBhbmVsLmluZGV4ID09PSAwKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmV4dFBhbmVsKGN1cnJlbnRQYW5lbElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5wYW5lbHMuZmluZChzID0+IHMuaW5kZXggPT09IHRoaXMuX3BhbmVsc1tjdXJyZW50UGFuZWxJZF0uaW5kZXggKyAxKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TnVtYmVyT2ZJbmNvbXBsZXRlUGFuZWxzKCkge1xuICAgIHJldHVybiB0aGlzLnBhbmVscy5yZWR1Y2UoKHByZXYsIG5leHQpID0+IChuZXh0LnN0YXR1cyAhPT0gQWNjb3JkaW9uU3RhdHVzLkNvbXBsZXRlID8gcHJldiArIDEgOiBwcmV2KSwgMCk7XG4gIH1cblxuICBwcml2YXRlIGdldE51bWJlck9mT3BlblBhbmVscygpIHtcbiAgICByZXR1cm4gdGhpcy5wYW5lbHMucmVkdWNlKChwcmV2LCBuZXh0KSA9PiAobmV4dC5vcGVuICE9PSBmYWxzZSA/IHByZXYgKyAxIDogcHJldiksIDApO1xuICB9XG59XG4iXX0=